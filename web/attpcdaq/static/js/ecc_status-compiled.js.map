{"version":3,"sources":["ecc_status.js"],"names":[],"mappings":"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","file":"ecc_status-compiled.js","sourcesContent":["\"use strict\";\n\nclass Modal extends React.Component {\n    componentDidMount(){\n        let $node = $(ReactDOM.findDOMNode(this));\n        $node.modal('show');\n        $node.on('hidden.bs.modal', this.props.handleHideModal);\n    }\n\n    render(){\n        return (\n          <div className=\"modal fade\">\n            <div className=\"modal-dialog modal-lg\">\n              <div className=\"modal-content\">\n                <div className=\"modal-header\">\n                  <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n                  <h4 className=\"modal-title\">{this.props.title}</h4>\n                </div>\n                <div className=\"modal-body\">\n                  <pre>{this.props.content}</pre>\n                </div>\n                <div className=\"modal-footer\">\n                  <button type=\"button\" className=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        )\n    }\n}\n\n\nfunction get_label_class(state_name) {\n    if (state_name == 'Idle') {\n        return 'label-idle';\n    }\n    else if (state_name == 'Described') {\n        return 'label-described';\n    }\n    else if (state_name == 'Prepared') {\n        return 'label-prepared';\n    }\n    else if (state_name == 'Ready') {\n        return 'label-ready';\n    }\n    else if (state_name == 'Running') {\n        return 'label-running';\n    }\n    else {\n        return 'label-error';\n    }\n}\n\nfunction ECCStatusLabel(props) {\n    const state_name = props.state_name;\n    const is_transitioning = props.is_transitioning;\n\n    if (is_transitioning) {\n        return (<span className=\"fa fa-pulse fa-spinner\"></span>);\n    }\n    else {\n        const label_class = get_label_class(state_name);\n        return (\n            <span className={`label ${label_class}`}>{state_name}</span>\n        );\n    }\n}\n\nfunction get_config_text(config) {\n    if (config) {\n        return config.describe + '/' + config.prepare + '/' + config.configure;\n    }\n    else {\n        return ''\n    }\n}\n\nfunction EccControlButton(props) {\n    let icon_class;\n    switch (props.action) {\n        case 'describe':\n            icon_class = 'fa-server';\n            break;\n        case 'prepare':\n            icon_class = 'fa-link';\n            break;\n        case 'configure':\n            icon_class = 'fa-cog';\n            break;\n        case 'start':\n            icon_class = 'fa-start';\n            break;\n        case 'stop':\n            icon_class = 'fa-stop';\n            break;\n        case 'reset':\n            icon_class = 'fa-repeat';\n            break;\n        default:\n            icon_class = '';\n    }\n\n    return (\n        <span className={`icon-btn source-ctrl-btn fa ${icon_class}`}></span>\n    );\n}\n\nfunction ButtonBar(props) {\n    const actions = ['describe', 'prepare', 'configure', 'start', 'stop', 'reset'];\n    const buttons = actions.map((action) => {\n        return (<EccControlButton action={action}/>)\n    });\n    return (<span>{buttons}</span>);\n}\n\nclass ECCServerPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            servers: [],\n            configs: [],\n            logFileModalVisible: false,\n            logFileModalContent: '',\n        };\n    }\n\n    updateFromServer() {\n        const ecc_request = $.get('/daq/api/ecc_servers');\n        ecc_request.done(servers => {\n            let promises = servers.map((server, index) => $.get(server.selected_config));\n\n            $.when.apply($, promises).done(configs => {\n                if (!$.isArray(configs)) {\n                    configs = [configs];\n                }\n                this.setState({\n                    servers: servers,\n                    configs: configs,\n                });\n            });\n        });\n    }\n\n    componentDidMount() {\n        this.updateFromServer();\n        this.timerID = setInterval(() => this.updateFromServer(), 5000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    showLogFileModal(url) {\n        $.get(url + 'log_file').done(response => {\n            this.setState({\n                logFileModalVisible: true,\n                logFileModalContent: response.content,\n            });\n        });\n    }\n\n    hideLogFileModal() {\n        this.setState({\n            logFileModalContent: '',\n            logFileModalVisible: false,\n        });\n    }\n\n    render() {\n        const rows = this.state.servers.map((server, index) => {\n            const config = this.state.configs[index];\n            const config_text = get_config_text(config);\n\n            return (\n                <tr key={server.name}>\n                    <td>{server.name}</td>\n                    <td>\n                        <ECCStatusLabel\n                            state_name={server.get_state_display}\n                            is_transitioning={server.is_transitioning}\n                        />\n                    </td>\n                    <td>\n                        <span className=\"icon-btn fa fa-search\" onClick={() => this.showLogFileModal(server.url)}></span>\n                    </td>\n                    <td>{config_text}</td>\n                    <td><ButtonBar /></td>\n                </tr>\n            )\n        });\n\n        let modal;\n        if (this.state.logFileModalVisible) {\n            modal = <Modal\n                handleHideModal={() => this.hideLogFileModal()}\n                title=\"Log file\"\n                content={this.state.logFileModalContent}\n            />;\n        }\n        else {\n            modal = null;\n        }\n\n        return (\n            <div className=\"panel panel-default\">\n                <div className=\"panel-heading\">ECC Server Status</div>\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>State</th>\n                            <th>Logs</th>\n                            <th>Selected Config</th>\n                            <th>Controls</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {rows}\n                    </tbody>\n                </table>\n                {modal}\n            </div>\n        )\n    }\n}\n\nReactDOM.render(\n    <ECCServerPanel/>,\n    document.getElementById('ecc-server-status-panel')\n);"]}